// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// use prisma:dev script to use .env.development.local file
// example: yarn prisma:dev migrate dev, yarn prisma:dev studio

// Write your data models here
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  admin
  participant
}

model User {
  id            String                @id @default(cuid())
  name          String?
  email         String?               @unique
  emailVerified DateTime?             @map("email_verified")
  password      String?
  image         Avatar?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  todos         CoordinatorsOnTodos[]
  participant   Participant?
  role          UserRole
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TodoStatus {
  new
  approved
  archived
}

enum TodoDataType {
  analyses
  consents
  healthRecords
  geneticData
  specimens
}

model Todo {
  id              String                @id @default(cuid())
  description     String
  image           Avatar?
  status          TodoStatus            @default(new)
  submissionDate  DateTime              @default(now()) @map("submission_date")
  endDate         DateTime              @map("end_date")
  title           String
  dataTypes       TodoDataType[]        @map("data_types")
  users           CoordinatorsOnTodos[]
  participants    ParticipantsOnTodos[]
  documentation   Document[]
  surveyResponses SurveyResponse[]
}

model Avatar {
  todo       Todo?    @relation(fields: [todoId], references: [id])
  todoId     String?  @unique @map("todo_id")
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @unique @map("user_id")
  image      Document @relation(fields: [imageId], references: [id])
  imageId    String   @map("image_id")
  insertedAt DateTime @default(now()) @map("inserted_at")

  @@id([imageId])
}

model CoordinatorsOnTodos {
  todo       Todo     @relation(fields: [todoId], references: [id])
  todoId     String   @map("todo_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  insertedAt DateTime @default(now()) @map("inserted_at")

  @@id([todoId, userId])
}

model ParticipantsOnTodos {
  todo          Todo        @relation(fields: [todoId], references: [id])
  todoId        String      @map("todo_id")
  participant   Participant @relation(fields: [participantId], references: [id])
  participantId String      @map("participant_id")
  consent       Consent     @relation(fields: [consentId], references: [id])
  consentId     String      @map("consent_id")
  insertedAt    DateTime    @default(now()) @map("inserted_at")

  @@id([todoId, participantId])
}

enum ConsentEnum {
  yes
  no
}

enum ConsentState {
  full
  partial
  none
}

model Consent {
  id                  String                @id @default(cuid())
  analyses            ConsentEnum           @default(yes)
  geneticData         ConsentEnum           @default(yes)
  healthRecords       ConsentEnum           @default(yes)
  specimens           ConsentEnum           @default(yes)
  insertedAt          DateTime              @default(now()) @map("inserted_at")
  ParticipantsOnTodos ParticipantsOnTodos[]
}

model Document {
  id           String   @id @default(cuid())
  uploadedById String?  @map("uploaded_by_id")
  name         String
  url          String
  fileType     String   @map("file_type")
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  avatar       Avatar?
  Todo         Todo?    @relation(fields: [todoId], references: [id])
  todoId       String?  @map("todo_id")
  insertedAt   DateTime @default(now()) @map("inserted_at")
}

model NotificationEvent {
  id               String   @id @default(cuid())
  insertedAt       DateTime @default(now()) @map("inserted_at")
  notificationType String   @map("notification_type")
  body             Json
}

enum MethodType {
  get
  post
  put
  patch
  delete
}

model EventLog {
  id         String     @id @default(cuid())
  model      String
  recordIds  String[]   @map("record_id")
  methodType MethodType @map("method_type")
  insertedAt DateTime   @default(now()) @map("inserted_at")
  body       Json?
  userId     String?    @map("user_id")
}

model Participant {
  id                              String                @id @default(cuid())
  insertedAt                      DateTime              @default(now()) @map("inserted_at")
  updatedAt                       DateTime              @default(now()) @map("updated_at")
  user                            User                  @relation(fields: [userId], references: [id])
  userId                          String                @unique @map("user_id")
  enrolledTribe                   String?               @map("enrolled_tribe")
  homePhone                       String?               @map("home_phone")
  workPhone                       String?               @map("work_phone")
  physicalAddress                 String?               @map("physical_address")
  emergencyContactName            String?               @map("emergency_contact_name")
  emergencyContactRelationship    String?               @map("emergency_contact_relationship")
  emergencyContactEmail           String?               @map("emergency_contact_email")
  emergencyContactHomePhone       String?               @map("emergency_contact_home_phone")
  emergencyContactWorkPhone       String?               @map("emergency_contact_work_phone")
  emergencyContactPhysicalAddress String?               @map("emergency_contact_physical_address")
  todos                           ParticipantsOnTodos[]
}

model SurveyResponse {
  id              String   @id @default(cuid())
  insertedAt      DateTime @default(now()) @map("inserted_at")
  surveyId        String   @map("survey_id")
  todoId          String   @map("todo_id")
  redcapEventName String   @map("redcap_event_name")
  timestamp       String
  responses       Json
  participantId   String   @map("participant_id")
  todo            Todo     @relation(fields: [todoId], references: [id])
}
