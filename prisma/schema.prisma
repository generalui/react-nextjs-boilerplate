// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// use prisma:dev script to use .env.development.local file
// example: yarn prisma:dev migrate dev, yarn prisma:dev studio

// Write your data models here
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                  @id @default(cuid())
  name          String?
  email         String?                 @unique
  emailVerified DateTime?               @map("email_verified")
  password      String?
  image         Avatar?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  studies       CoordinatorsOnStudies[]
  participant   Participant?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum StudyStatus {
  new
  approved
  archived
}

enum StudyDataTypes {
  consents
  geneticData
  healthRecords
  specimens
}

model Study {
  id             String                  @id @default(cuid())
  description    String
  image          Avatar?
  status         StudyStatus             @default(new)
  submissionDate DateTime                @default(now()) @map("submission_date")
  endDate        DateTime                @map("end_date")
  title          String
  dataTypes      StudyDataTypes[]        @map("data_types")
  users          CoordinatorsOnStudies[]
  documentation  Document[]
  dataVault      DataVault[]
}

model Avatar {
  study      Study?   @relation(fields: [studyId], references: [id])
  studyId    String?  @unique @map("study_id")
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @unique @map("user_id")
  image      Document @relation(fields: [imageId], references: [id])
  imageId    String   @map("image_id")
  insertedAt DateTime @default(now()) @map("inserted_at")

  @@id([imageId])
}

model DataVault {
  study      Study          @relation(fields: [studyId], references: [id])
  studyId    String         @map("study_id")
  document   Document       @relation(fields: [documentId], references: [id])
  documentId String         @map("document_id")
  insertedAt DateTime       @default(now()) @map("inserted_at")
  dataType   StudyDataTypes

  @@id([documentId])
}

model CoordinatorsOnStudies {
  study      Study    @relation(fields: [studyId], references: [id])
  studyId    String   @map("study_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  insertedAt DateTime @default(now()) @map("inserted_at")

  @@id([studyId, userId])
}

model Document {
  id           String     @id @default(cuid())
  uploadedById String?    @map("uploaded_by_id")
  name         String
  url          String
  fileType     String     @map("file_type")
  uploadedBy   User?      @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  avatar       Avatar?
  Study        Study?     @relation(fields: [studyId], references: [id])
  studyId      String?    @map("study_id")
  insertedAt   DateTime   @default(now()) @map("inserted_at")
  dataVault    DataVault?
}

model NotificationEvent {
  id               String   @id @default(cuid())
  insertedAt       DateTime @default(now()) @map("inserted_at")
  notificationType String   @map("notification_type")
  body             Json
}

enum MethodType {
  get
  post
  put
  patch
  delete
}

model EventLog {
  id         String     @id @default(cuid())
  model      String
  recordIds  String[]   @map("record_id")
  methodType MethodType @map("method_type")
  insertedAt DateTime   @default(now()) @map("inserted_at")
  body       Json?
  userId     String?    @map("user_id")
}

model Participant {
  id              String   @id @default(cuid())
  insertedAt      DateTime @default(now()) @map("inserted_at")
  updatedAt       DateTime @default(now()) @map("updated_at")
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique @map("user_id")
  enrolledTribe   String   @map("enrolled_tribe")
  homePhone       String   @map("home_phone")
  workPhone       String   @map("work_phone")
  physicalAddress String   @map("physical_address")
}
